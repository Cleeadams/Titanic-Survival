SibSp+
Parch+
Fare+
Embarked+
nameOccur+
AgeNA,
data=trainSet
)
test.predict <- round(predict(model,testSet),0)
test.actual <- testSet$Survived
accuaracy <- c()
bluh <- c(1:length(test.actual))
for (i in bluh) {
if (test.actual[i]==test.predict[i]) {
accuaracy[i] <- TRUE
}
else{
accuaracy[i] <- FALSE
}
}
proportion.correct[j] <- Freq(accuaracy[accuaracy==TRUE])$freq/
length(test.actual); proportion.correct[j]
}
## randomly selecting training set
loop.vector <- c(1:50)
proportion.correct <- c()
for (j in loop.vector) {
trainSet <- titanic.name[sample(nrow(titanic.name), 713),] # Should have length of 713 which is 80%
trainSet.ID <- trainSet$PassengerId
testSet <- titanic.name[-trainSet$PassengerId,] # Should have length of 178 which is 20%
TestSet.ID <- testSet$PassengerId
# ---------- Creating Model with Trainning Set ----------
model <- lm(Survived~Pclass+
Sex+
Age+
SibSp+
Parch+
Fare+
Embarked+
nameOccur+
AgeNA,
data=trainSet
)
test.predict <- round(predict(model,testSet),0)
test.actual <- testSet$Survived
accuaracy <- c()
bluh <- c(1:length(test.actual))
for (i in bluh) {
if (test.actual[i]==test.predict[i]) {
accuaracy[i] <- TRUE
}
else{
accuaracy[i] <- FALSE
}
}
proportion.correct[j] <- Freq(accuaracy[accuaracy==TRUE])$freq/
length(test.actual); proportion.correct[j]
}
## randomly selecting training set
loop.vector <- c(1:20)
proportion.correct <- c()
for (j in loop.vector) {
trainSet <- titanic.name[sample(nrow(titanic.name), 713),] # Should have length of 713 which is 80%
trainSet.ID <- trainSet$PassengerId
testSet <- titanic.name[-trainSet$PassengerId,] # Should have length of 178 which is 20%
TestSet.ID <- testSet$PassengerId
# ---------- Creating Model with Trainning Set ----------
model <- lm(Survived~Pclass+
Sex+
Age+
SibSp+
Parch+
Fare+
Embarked+
nameOccur+
AgeNA,
data=trainSet
)
test.predict <- round(predict(model,testSet),0)
test.actual <- testSet$Survived
accuaracy <- c()
bluh <- c(1:length(test.actual))
for (i in bluh) {
if (test.actual[i]==test.predict[i]) {
accuaracy[i] <- TRUE
}
else{
accuaracy[i] <- FALSE
}
}
proportion.correct[j] <- Freq(accuaracy[accuaracy==TRUE])$freq/
length(test.actual); proportion.correct[j]
}
## randomly selecting training set
loop.vector <- c(1:20)
proportion.correct <- c()
for (j in loop.vector) {
trainSet <- titanic.name[sample(nrow(titanic.name), 713),] # Should have length of 713 which is 80%
trainSet.ID <- trainSet$PassengerId
testSet <- titanic.name[-trainSet$PassengerId,] # Should have length of 178 which is 20%
TestSet.ID <- testSet$PassengerId
# ---------- Creating Model with Trainning Set ----------
model <- lm(Survived~Pclass+
Sex+
Age+
SibSp+
Parch+
Fare+
Embarked+
nameOccur+
AgeNA,
data=trainSet
)
test.predict <- round(predict(model,testSet),0)
test.actual <- testSet$Survived
accuaracy <- c()
bluh <- c(1:length(test.actual))
for (i in bluh) {
if (test.actual[i]==test.predict[i]) {
accuaracy[i] <- TRUE
}
else{
accuaracy[i] <- FALSE
}
}
proportion.correct[j] <- Freq(accuaracy[accuaracy==TRUE])$freq/
length(test.actual); proportion.correct[j]
}
## randomly selecting training set
loop.vector <- c(1:20)
proportion.correct <- c()
for (j in loop.vector) {
trainSet <- titanic.name[sample(nrow(titanic.name), 713),] # Should have length of 713 which is 80%
trainSet.ID <- trainSet$PassengerId
testSet <- titanic.name[-trainSet$PassengerId,] # Should have length of 178 which is 20%
TestSet.ID <- testSet$PassengerId
# ---------- Creating Model with Trainning Set ----------
model <- lm(Survived~Pclass+
Sex+
Age+
SibSp+
Parch+
Fare+
Embarked+
nameOccur+
AgeNA,
data=trainSet
)
test.predict <- round(predict(model,testSet),0)
test.actual <- testSet$Survived
accuaracy <- c()
bluh <- c(1:length(test.actual))
for (i in bluh) {
if (test.actual[i]==test.predict[i]) {
accuaracy[i] <- TRUE
}
else{
accuaracy[i] <- FALSE
}
}
proportion.correct[j] <- Freq(accuaracy[accuaracy==TRUE])$freq/
length(test.actual); proportion.correct[j]
}
proportion.correct
mean(proportion.correct)
median(proportion.correct)
test.predict <- round(predict(model,titanic.name),0)
test.actual <- titanic.name$Survived
accuaracy <- c()
bluh <- c(1:length(test.actual))
for (i in bluh) {
if (test.actual[i]==test.predict[i]) {
accuaracy[i] <- TRUE
}
else{
accuaracy[i] <- FALSE
}
}
proportion.correct[j] <- Freq(accuaracy[accuaracy==TRUE])$freq/
length(test.actual); proportion.correct[j]
mean(proportion.correct)
median(proportion.correct)
## randomly selecting training set
loop.vector <- c(1:20)
proportion.correct <- c()
for (j in loop.vector) {
trainSet <- titanic.name[sample(nrow(titanic.name), 713),] # Should have length of 713 which is 80%
trainSet.ID <- trainSet$PassengerId
testSet <- titanic.name[-trainSet$PassengerId,] # Should have length of 178 which is 20%
TestSet.ID <- testSet$PassengerId
# ---------- Creating Model with Trainning Set ----------
model <- lm(Survived~Pclass+
Sex+
Age+
SibSp+
Parch+
Fare+
Embarked+
nameOccur+
AgeNA,
data=trainSet
)
test.predict <- round(predict(model,titanic.name),0)
test.actual <- titanic.name$Survived
accuaracy <- c()
bluh <- c(1:length(test.actual))
for (i in bluh) {
if (test.actual[i]==test.predict[i]) {
accuaracy[i] <- TRUE
}
else{
accuaracy[i] <- FALSE
}
}
proportion.correct[j] <- Freq(accuaracy[accuaracy==TRUE])$freq/
length(test.actual); proportion.correct[j]
}
## randomly selecting training set
loop.vector <- c(1:20)
proportion.correct <- c()
for (j in loop.vector) {
trainSet <- titanic.name[sample(nrow(titanic.name), 713),] # Should have length of 713 which is 80%
trainSet.ID <- trainSet$PassengerId
testSet <- titanic.name[-trainSet$PassengerId,] # Should have length of 178 which is 20%
TestSet.ID <- testSet$PassengerId
# ---------- Creating Model with Trainning Set ----------
model <- lm(Survived~Pclass+
Sex+
Age+
SibSp+
Parch+
Fare+
Embarked+
nameOccur+
AgeNA,
data=trainSet
)
test.predict <- round(predict(model,titanic.name),0)
test.actual <- titanic.name$Survived
accuaracy <- c()
bluh <- c(1:length(test.actual))
for (i in bluh) {
if (test.actual[i]==test.predict[i]) {
accuaracy[i] <- TRUE
}
else{
accuaracy[i] <- FALSE
}
}
proportion.correct[j] <- Freq(accuaracy[accuaracy==TRUE])$freq/
length(test.actual); proportion.correct[j]
}
proportion.correct
mean(proportion.correct)
median(proportion.correct)
sd(proportion.correct)
## randomly selecting training set
loop.vector <- c(1:20)
proportion.correct <- c()
for (j in loop.vector) {
trainSet <- titanic.name[sample(nrow(titanic.name), 713),] # Should have length of 713 which is 80%
trainSet.ID <- trainSet$PassengerId
testSet <- titanic.name[-trainSet$PassengerId,] # Should have length of 178 which is 20%
TestSet.ID <- testSet$PassengerId
# ---------- Creating Model with Trainning Set ----------
model <- lm(Survived~Pclass+
Sex+
Age+
SibSp+
Parch+
Fare+
Embarked+
nameOccur,
data=trainSet
)
test.predict <- round(predict(model,titanic.name),0)
test.actual <- titanic.name$Survived
accuaracy <- c()
bluh <- c(1:length(test.actual))
for (i in bluh) {
if (test.actual[i]==test.predict[i]) {
accuaracy[i] <- TRUE
}
else{
accuaracy[i] <- FALSE
}
}
proportion.correct[j] <- Freq(accuaracy[accuaracy==TRUE])$freq/
length(test.actual); proportion.correct[j]
}
proportion.correct
mean(proportion.correct)
median(proportion.correct)
## randomly selecting training set
loop.vector <- c(1:20)
proportion.correct <- c()
for (j in loop.vector) {
trainSet <- titanic.name[sample(nrow(titanic.name), 713),] # Should have length of 713 which is 80%
trainSet.ID <- trainSet$PassengerId
testSet <- titanic.name[-trainSet$PassengerId,] # Should have length of 178 which is 20%
TestSet.ID <- testSet$PassengerId
# ---------- Creating Model with Trainning Set ----------
model <- lm(Survived~Pclass+
Sex+
Age+
SibSp+
Parch+
Fare+
Embarked+
AgeNA,
data=trainSet
)
test.predict <- round(predict(model,titanic.name),0)
test.actual <- titanic.name$Survived
accuaracy <- c()
bluh <- c(1:length(test.actual))
for (i in bluh) {
if (test.actual[i]==test.predict[i]) {
accuaracy[i] <- TRUE
}
else{
accuaracy[i] <- FALSE
}
}
proportion.correct[j] <- Freq(accuaracy[accuaracy==TRUE])$freq/
length(test.actual); proportion.correct[j]
}
## randomly selecting training set
loop.vector <- c(1:20)
proportion.correct <- c()
for (j in loop.vector) {
trainSet <- titanic.name[sample(nrow(titanic.name), 713),] # Should have length of 713 which is 80%
trainSet.ID <- trainSet$PassengerId
testSet <- titanic.name[-trainSet$PassengerId,] # Should have length of 178 which is 20%
TestSet.ID <- testSet$PassengerId
# ---------- Creating Model with Trainning Set ----------
model <- lm(Survived~Pclass+
Sex+
Age+
SibSp+
Parch+
Fare+
Embarked+
AgeNA,
data=trainSet
)
test.predict <- round(predict(model,titanic.name),0)
test.actual <- titanic.name$Survived
accuaracy <- c()
bluh <- c(1:length(test.actual))
for (i in bluh) {
if (test.actual[i]==test.predict[i]) {
accuaracy[i] <- TRUE
}
else{
accuaracy[i] <- FALSE
}
}
proportion.correct[j] <- Freq(accuaracy[accuaracy==TRUE])$freq/
length(test.actual); proportion.correct[j]
}
proportion.correct
mean(proportion.correct)
median(proportion.correct)
## randomly selecting training set
loop.vector <- c(1:20)
proportion.correct <- c()
for (j in loop.vector) {
trainSet <- titanic.name[sample(nrow(titanic.name), 713),] # Should have length of 713 which is 80%
trainSet.ID <- trainSet$PassengerId
testSet <- titanic.name[-trainSet$PassengerId,] # Should have length of 178 which is 20%
TestSet.ID <- testSet$PassengerId
# ---------- Creating Model with Trainning Set ----------
model <- lm(Survived~Pclass+
Sex+
Age+
SibSp+
Parch+
Fare+
Embarked+
AgeNA,
data=trainSet
)
test.predict <- round(predict(model,titanic.name),0)
test.actual <- titanic.name$Survived
accuaracy <- c()
bluh <- c(1:length(test.actual))
for (i in bluh) {
if (test.actual[i]==test.predict[i]) {
accuaracy[i] <- TRUE
}
else{
accuaracy[i] <- FALSE
}
}
proportion.correct[j] <- Freq(accuaracy[accuaracy==TRUE])$freq/
length(test.actual); proportion.correct[j]
}
proportion.correct
mean(proportion.correct)
median(proportion.correct)
## randomly selecting training set
loop.vector <- c(1:20)
proportion.correct <- c()
for (j in loop.vector) {
trainSet <- titanic.name[sample(nrow(titanic.name), 713),] # Should have length of 713 which is 80%
trainSet.ID <- trainSet$PassengerId
testSet <- titanic.name[-trainSet$PassengerId,] # Should have length of 178 which is 20%
TestSet.ID <- testSet$PassengerId
# ---------- Creating Model with Trainning Set ----------
model <- lm(Survived~Pclass+
Sex+
Age+
SibSp+
Parch+
Fare+
Embarked+
AgeNA,
data=trainSet
)
test.predict <- round(predict(model,titanic.name),0)
test.actual <- titanic.name$Survived
accuaracy <- c()
bluh <- c(1:length(test.actual))
for (i in bluh) {
if (test.actual[i]==test.predict[i]) {
accuaracy[i] <- TRUE
}
else{
accuaracy[i] <- FALSE
}
}
proportion.correct[j] <- Freq(accuaracy[accuaracy==TRUE])$freq/
length(test.actual); proportion.correct[j]
}
proportion.correct
mean(proportion.correct)
median(proportion.correct)
## randomly selecting training set
loop.vector <- c(1:20)
proportion.correct <- c()
for (j in loop.vector) {
trainSet <- titanic.name[sample(nrow(titanic.name), 713),] # Should have length of 713 which is 80%
trainSet.ID <- trainSet$PassengerId
testSet <- titanic.name[-trainSet$PassengerId,] # Should have length of 178 which is 20%
TestSet.ID <- testSet$PassengerId
# ---------- Creating Model with Trainning Set ----------
model <- lm(Survived~Pclass+
Sex+
Age+
SibSp+
Parch+
Fare+
nameOccur+
AgeNA,
data=trainSet
)
test.predict <- round(predict(model,titanic.name),0)
test.actual <- titanic.name$Survived
accuaracy <- c()
bluh <- c(1:length(test.actual))
for (i in bluh) {
if (test.actual[i]==test.predict[i]) {
accuaracy[i] <- TRUE
}
else{
accuaracy[i] <- FALSE
}
}
proportion.correct[j] <- Freq(accuaracy[accuaracy==TRUE])$freq/
length(test.actual); proportion.correct[j]
}
proportion.correct
mean(proportion.correct)
median(proportion.correct)
## randomly selecting training set
loop.vector <- c(1:100)
proportion.correct <- c()
for (j in loop.vector) {
trainSet <- titanic.name[sample(nrow(titanic.name), 713),] # Should have length of 713 which is 80%
trainSet.ID <- trainSet$PassengerId
testSet <- titanic.name[-trainSet$PassengerId,] # Should have length of 178 which is 20%
TestSet.ID <- testSet$PassengerId
# ---------- Creating Model with Trainning Set ----------
model <- lm(Survived~Pclass+
Sex+
Age+
SibSp+
Parch+
Fare+
nameOccur+
AgeNA,
data=trainSet
)
test.predict <- round(predict(model,titanic.name),0)
test.actual <- titanic.name$Survived
accuaracy <- c()
bluh <- c(1:length(test.actual))
for (i in bluh) {
if (test.actual[i]==test.predict[i]) {
accuaracy[i] <- TRUE
}
else{
accuaracy[i] <- FALSE
}
}
proportion.correct[j] <- Freq(accuaracy[accuaracy==TRUE])$freq/
length(test.actual); proportion.correct[j]
}
proportion.correct
mean(proportion.correct)
median(proportion.correct)
